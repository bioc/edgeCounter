% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ecParallel.R
\name{ecParallelFunc}
\alias{ecParallelFunc}
\title{Parallel execution of any function with arbitrary arguments.}
\usage{
ecParallelFunc(func, benchmark = FALSE, ...)
}
\arguments{
\item{func}{Function to run, which must take arguments specified later.}

\item{benchmark}{If TRUE will message execution time. The time measured
includes all overheads such as PSOCK cluster initialization.}

\item{...}{Arbitrary arguments of the function. All arguments must be
list-like' objects (see details).}
}
\value{
A list of the execution results.
}
\description{
\code{ecParallelFunc()} runs any function with arbitrary arguments
in a parallel manner specified by \code{ecOptions()}.
}
\section{Arguments supplied}{
\code{ecParallelFunc()} takes arbitrary arguments supplied as list-like objects
and feed consecutive combinations of the arguments.
\subsection{'list-like' objects}{

A list-like object must support the following operators.
\itemize{
\item \verb{[[]]} double bracket subsetting, return an individual object in the list.
\item \code{length} length accessor, return length of the list.
}
}
}

\section{Behavior depending on \code{ecOptions}}{
\code{\link[=ecOptions]{ecOptions()}} describes options of this package
including parallel computation.
If \code{parallel == FALSE}, \code{ecParallelFunc()} will be running
the combinations in serial. If \code{parallel == TRUE},
\code{ecParallelFunc()} will initialize PSOCK cluster, execute computation,
stop the PSOCK cluster, and then return the results.
}

\examples{
ecParallelFunc(function(x, y) x + y, x = c(1, 2, 3), y = list(5))
}
